// Code generated by goyacc -o tnzepl.go -p tn tnzepl.y. DO NOT EDIT.

//line tnzepl.y:1

package main

import __yyfmt__ "fmt"

//line tnzepl.y:3

import "github.com/timtadh/lexmachine"

// import "log"

var tnRoot expr

const IF = 57346
const ELSE = 57347
const LET = 57348
const FOR = 57349
const IDENTIFIER = 57350
const LITERAL = 57351
const FN = 57352
const RARROW = 57353
const BREAK = 57354
const CONTINUE = 57355

var tnToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IF",
	"ELSE",
	"LET",
	"FOR",
	"IDENTIFIER",
	"LITERAL",
	"FN",
	"RARROW",
	"BREAK",
	"CONTINUE",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"'='",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"','",
	"':'",
}

var tnStatenames = [...]string{}

const tnEofCode = 1
const tnErrCode = 2
const tnInitialStackSize = 16

//line yacctab:1
var tnExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const tnPrivate = 57344

const tnLast = 103

var tnAct = [...]int8{
	38, 10, 11, 9, 4, 2, 71, 68, 45, 12,
	26, 27, 31, 32, 33, 29, 30, 41, 75, 13,
	35, 61, 24, 67, 34, 72, 55, 59, 41, 44,
	46, 47, 48, 43, 49, 50, 51, 41, 58, 54,
	60, 39, 62, 64, 65, 25, 56, 63, 23, 66,
	5, 21, 6, 16, 42, 37, 7, 8, 14, 22,
	15, 20, 23, 19, 53, 21, 28, 16, 52, 69,
	74, 70, 14, 73, 15, 57, 76, 78, 79, 23,
	77, 40, 21, 28, 16, 3, 18, 17, 36, 41,
	23, 15, 1, 21, 28, 16, 0, 0, 0, 0,
	14, 0, 15,
}

var tnPact = [...]int16{
	44, -1000, -1000, 4, -1000, 37, -9, 86, -1000, -5,
	-10, -1000, 8, -1000, 44, -1000, -1000, -1000, -1000, 50,
	-1000, 75, 49, 86, 44, -11, 86, -5, -1000, 86,
	86, 86, 86, 86, 44, 11, 58, 23, -1000, 3,
	34, 44, 14, 14, -1000, 86, -5, -10, -10, -1000,
	-1000, -1000, 6, -18, -1000, -1000, -1000, -1000, -1000, 86,
	-1000, 86, -20, 10, -1000, -1000, -5, -1000, 44, 14,
	0, 44, -1000, -1000, -1000, 44, 14, 14, -1000, -1000,
}

var tnPgo = [...]int8{
	0, 92, 5, 88, 9, 19, 87, 86, 85, 4,
	3, 1, 2, 68, 64, 63, 61, 0, 59,
}

var tnR1 = [...]int8{
	0, 1, 3, 3, 4, 4, 5, 5, 5, 5,
	5, 2, 2, 8, 8, 8, 9, 9, 9, 9,
	9, 10, 10, 10, 11, 11, 11, 11, 12, 12,
	13, 13, 14, 14, 6, 6, 16, 15, 15, 7,
	7, 7, 18, 18, 18, 17,
}

var tnR2 = [...]int8{
	0, 1, 0, 2, 1, 3, 3, 1, 1, 1,
	1, 0, 1, 1, 3, 2, 4, 3, 2, 1,
	1, 3, 3, 1, 3, 3, 3, 1, 4, 1,
	0, 1, 3, 1, 1, 1, 3, 3, 5, 2,
	1, 3, 3, 7, 6, 3,
}

var tnChk = [...]int16{
	-1000, -1, -2, -8, -9, 6, 8, 12, 13, -10,
	-11, -12, -4, -5, 14, 16, 9, -6, -7, -15,
	-16, 7, -18, 4, 18, 8, 19, -10, 8, 20,
	21, 22, 23, 24, 16, -2, -3, 5, -17, -5,
	6, 14, 5, -4, -9, 19, -10, -11, -11, -12,
	-12, -12, -13, -14, -9, 15, -4, 17, -17, 4,
	-17, 18, 8, -2, -17, -17, -10, 17, 25, -4,
	-4, 26, 15, -9, -17, 18, -9, -9, -17, -17,
}

var tnDef = [...]int8{
	11, -2, 1, 12, 13, 0, 8, 0, 19, 20,
	23, 27, 29, 4, 11, 2, 7, 9, 10, 34,
	35, 0, 40, 0, 15, 0, 0, 18, 8, 0,
	0, 0, 0, 0, 30, 0, 0, 0, 39, 0,
	0, 11, 0, 0, 14, 0, 17, 21, 22, 24,
	25, 26, 0, 31, 33, 5, 3, 6, 36, 0,
	42, 0, 0, 0, 41, 37, 16, 28, 0, 0,
	0, 0, 45, 32, 38, 0, 0, 0, 44, 43,
}

var tnTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 24, 3, 3,
	16, 17, 22, 20, 25, 21, 3, 23, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 26, 18,
	3, 19, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 14, 3, 15,
}

var tnTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13,
}

var tnTok3 = [...]int8{
	0,
}

var tnErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	tnDebug        = 0
	tnErrorVerbose = false
)

type tnLexer interface {
	Lex(lval *tnSymType) int
	Error(s string)
}

type tnParser interface {
	Parse(tnLexer) int
	Lookahead() int
}

type tnParserImpl struct {
	lval  tnSymType
	stack [tnInitialStackSize]tnSymType
	char  int
}

func (p *tnParserImpl) Lookahead() int {
	return p.char
}

func tnNewParser() tnParser {
	return &tnParserImpl{}
}

const tnFlag = -1000

func tnTokname(c int) string {
	if c >= 1 && c-1 < len(tnToknames) {
		if tnToknames[c-1] != "" {
			return tnToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func tnStatname(s int) string {
	if s >= 0 && s < len(tnStatenames) {
		if tnStatenames[s] != "" {
			return tnStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func tnErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !tnErrorVerbose {
		return "syntax error"
	}

	for _, e := range tnErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + tnTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(tnPact[state])
	for tok := TOKSTART; tok-1 < len(tnToknames); tok++ {
		if n := base + tok; n >= 0 && n < tnLast && int(tnChk[int(tnAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if tnDef[state] == -2 {
		i := 0
		for tnExca[i] != -1 || int(tnExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; tnExca[i] >= 0; i += 2 {
			tok := int(tnExca[i])
			if tok < TOKSTART || tnExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if tnExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += tnTokname(tok)
	}
	return res
}

func tnlex1(lex tnLexer, lval *tnSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(tnTok1[0])
		goto out
	}
	if char < len(tnTok1) {
		token = int(tnTok1[char])
		goto out
	}
	if char >= tnPrivate {
		if char < tnPrivate+len(tnTok2) {
			token = int(tnTok2[char-tnPrivate])
			goto out
		}
	}
	for i := 0; i < len(tnTok3); i += 2 {
		token = int(tnTok3[i+0])
		if token == char {
			token = int(tnTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(tnTok2[1]) /* unknown char */
	}
	if tnDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", tnTokname(token), uint(char))
	}
	return char, token
}

func tnParse(tnlex tnLexer) int {
	return tnNewParser().Parse(tnlex)
}

func (tnrcvr *tnParserImpl) Parse(tnlex tnLexer) int {
	var tnn int
	var tnVAL tnSymType
	var tnDollar []tnSymType
	_ = tnDollar // silence set and not used
	tnS := tnrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	tnstate := 0
	tnrcvr.char = -1
	tntoken := -1 // tnrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		tnstate = -1
		tnrcvr.char = -1
		tntoken = -1
	}()
	tnp := -1
	goto tnstack

ret0:
	return 0

ret1:
	return 1

tnstack:
	/* put a state and value onto the stack */
	if tnDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", tnTokname(tntoken), tnStatname(tnstate))
	}

	tnp++
	if tnp >= len(tnS) {
		nyys := make([]tnSymType, len(tnS)*2)
		copy(nyys, tnS)
		tnS = nyys
	}
	tnS[tnp] = tnVAL
	tnS[tnp].yys = tnstate

tnnewstate:
	tnn = int(tnPact[tnstate])
	if tnn <= tnFlag {
		goto tndefault /* simple state */
	}
	if tnrcvr.char < 0 {
		tnrcvr.char, tntoken = tnlex1(tnlex, &tnrcvr.lval)
	}
	tnn += tntoken
	if tnn < 0 || tnn >= tnLast {
		goto tndefault
	}
	tnn = int(tnAct[tnn])
	if int(tnChk[tnn]) == tntoken { /* valid shift */
		tnrcvr.char = -1
		tntoken = -1
		tnVAL = tnrcvr.lval
		tnstate = tnn
		if Errflag > 0 {
			Errflag--
		}
		goto tnstack
	}

tndefault:
	/* default state action */
	tnn = int(tnDef[tnstate])
	if tnn == -2 {
		if tnrcvr.char < 0 {
			tnrcvr.char, tntoken = tnlex1(tnlex, &tnrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if tnExca[xi+0] == -1 && int(tnExca[xi+1]) == tnstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			tnn = int(tnExca[xi+0])
			if tnn < 0 || tnn == tntoken {
				break
			}
		}
		tnn = int(tnExca[xi+1])
		if tnn < 0 {
			goto ret0
		}
	}
	if tnn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			tnlex.Error(tnErrorMessage(tnstate, tntoken))
			Nerrs++
			if tnDebug >= 1 {
				__yyfmt__.Printf("%s", tnStatname(tnstate))
				__yyfmt__.Printf(" saw %s\n", tnTokname(tntoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for tnp >= 0 {
				tnn = int(tnPact[tnS[tnp].yys]) + tnErrCode
				if tnn >= 0 && tnn < tnLast {
					tnstate = int(tnAct[tnn]) /* simulate a shift of "error" */
					if int(tnChk[tnstate]) == tnErrCode {
						goto tnstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if tnDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", tnS[tnp].yys)
				}
				tnp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if tnDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", tnTokname(tntoken))
			}
			if tntoken == tnEofCode {
				goto ret1
			}
			tnrcvr.char = -1
			tntoken = -1
			goto tnnewstate /* try again in the same state */
		}
	}

	/* reduction by production tnn */
	if tnDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", tnn, tnStatname(tnstate))
	}

	tnnt := tnn
	tnpt := tnp
	_ = tnpt // guard against "declared and not used"

	tnp -= int(tnR2[tnn])
	// tnp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if tnp+1 >= len(tnS) {
		nyys := make([]tnSymType, len(tnS)*2)
		copy(nyys, tnS)
		tnS = nyys
	}
	tnVAL = tnS[tnp+1]

	/* consult goto table to find next state */
	tnn = int(tnR1[tnn])
	tng := int(tnPgo[tnn])
	tnj := tng + tnS[tnp].yys + 1

	if tnj >= tnLast {
		tnstate = int(tnAct[tng])
	} else {
		tnstate = int(tnAct[tnj])
		if int(tnChk[tnstate]) != -tnn {
			tnstate = int(tnAct[tng])
		}
	}
	// dummy call; replaced with literal code
	switch tnnt {

	case 1:
		tnDollar = tnS[tnpt-1 : tnpt+1]
//line tnzepl.y:19
		{
			tnRoot = tnVAL.Value.(expr)
		}
	case 2:
		tnDollar = tnS[tnpt-0 : tnpt+1]
//line tnzepl.y:22
		{
			tnVAL.Token = &lexmachine.Token{Value: exprProg{}}
		}
	case 3:
		tnDollar = tnS[tnpt-2 : tnpt+1]
//line tnzepl.y:23
		{
			tnVAL.Value = append(tnVAL.Value.(exprProg), tnDollar[2].Value.(expr))
		}
	case 5:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:27
		{
			tnVAL.Value = tnDollar[2].Value
		}
	case 6:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:30
		{
			tnVAL.Value = tnDollar[2].Value
		}
	case 7:
		tnDollar = tnS[tnpt-1 : tnpt+1]
//line tnzepl.y:31
		{
			tnVAL.Value = evalLiteral(tnDollar[1])
		}
	case 8:
		tnDollar = tnS[tnpt-1 : tnpt+1]
//line tnzepl.y:32
		{
			tnVAL.Value = exprLoad{identifier: string(tnDollar[1].Value.(unEvaled))}
		}
	case 11:
		tnDollar = tnS[tnpt-0 : tnpt+1]
//line tnzepl.y:37
		{
			tnVAL.Value = nil
		}
	case 13:
		tnDollar = tnS[tnpt-1 : tnpt+1]
//line tnzepl.y:40
		{
			tnVAL.Token = &lexmachine.Token{Value: exprProg{tnDollar[1].Value.(expr)}}
		}
	case 14:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:41
		{
			tnVAL.Value = append(tnDollar[1].Value.(exprProg), tnDollar[3].Value.(expr))
		}
	case 16:
		tnDollar = tnS[tnpt-4 : tnpt+1]
//line tnzepl.y:46
		{
			tnVAL.Value = statDefine{
				identifier: string(tnDollar[2].Value.(unEvaled)),
				expression: tnDollar[4].Value.(expr),
			}
		}
	case 17:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:58
		{
			tnVAL.Value = statAssign{
				identifier: string(tnDollar[1].Value.(unEvaled)),
				expression: tnDollar[3].Value.(expr),
			}
		}
	case 18:
		tnDollar = tnS[tnpt-2 : tnpt+1]
//line tnzepl.y:64
		{
			tnVAL.Value = exprBreak{value: tnDollar[2].Value.(expr)}
		}
	case 19:
		tnDollar = tnS[tnpt-1 : tnpt+1]
//line tnzepl.y:65
		{
			tnVAL.Value = exprContinue{}
		}
	case 36:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:95
		{
			tnVAL.Value = tnDollar[1].Value.(exprIf).addElse(tnDollar[3])
		}
	case 37:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:98
		{
			tnVAL.Value = exprIf{}.addIf(tnDollar[2], tnDollar[3])
		}
	case 38:
		tnDollar = tnS[tnpt-5 : tnpt+1]
//line tnzepl.y:99
		{
			tnVAL.Value = tnDollar[1].Value.(exprIf).addIf(tnDollar[4], tnDollar[5])
		}
	case 39:
		tnDollar = tnS[tnpt-2 : tnpt+1]
//line tnzepl.y:102
		{
			tnVAL.Value = exprLoop{body: tnDollar[2].Value.(expr)}
		}
	case 45:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:111
		{
			tnVAL.Value = tnDollar[2].Value
		}
	}
	goto tnstack /* stack new state and value */
}
