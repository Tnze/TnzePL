// Code generated by goyacc -o tnzepl.go -p tn tnzepl.y. DO NOT EDIT.

//line tnzepl.y:1

package main

import __yyfmt__ "fmt"

//line tnzepl.y:3

// import "log"
const IF = 57346
const ELSE = 57347
const LET = 57348
const FOR = 57349
const COMMENT = 57350
const IDENTIFIER = 57351
const LITERAL = 57352
const FN = 57353
const RARROW = 57354
const BREAK = 57355
const CONTINUE = 57356

var tnToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IF",
	"ELSE",
	"LET",
	"FOR",
	"COMMENT",
	"IDENTIFIER",
	"LITERAL",
	"FN",
	"RARROW",
	"BREAK",
	"CONTINUE",
	"':'",
	"';'",
	"'{'",
	"'}'",
	"'='",
	"'('",
	"')'",
	"','",
}

var tnStatenames = [...]string{}

const tnEofCode = 1
const tnErrCode = 2
const tnInitialStackSize = 16

//line yacctab:1
var tnExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const tnPrivate = 57344

const tnLast = 114

var tnAct = [...]int8{
	27, 54, 47, 36, 6, 62, 1, 14, 2, 12,
	15, 3, 10, 11, 17, 19, 13, 60, 61, 50,
	51, 59, 22, 24, 25, 39, 40, 31, 34, 48,
	44, 14, 18, 19, 15, 43, 23, 11, 17, 30,
	14, 46, 26, 15, 52, 23, 11, 17, 32, 53,
	57, 28, 64, 28, 37, 14, 76, 68, 35, 70,
	65, 69, 67, 74, 73, 75, 72, 71, 28, 41,
	28, 66, 78, 79, 49, 38, 37, 14, 80, 77,
	15, 58, 23, 11, 17, 55, 63, 48, 14, 21,
	12, 15, 3, 10, 11, 17, 14, 13, 42, 15,
	20, 23, 11, 17, 56, 29, 33, 45, 16, 9,
	8, 7, 5, 4,
}

var tnPact = [...]int16{
	-1000, 84, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13, -1000, 91, 73, 92, 36, 100, 19, 92, 27,
	39, -1000, 59, -5, 34, 53, 89, -1000, -1000, 34,
	20, 58, -1000, -2, -1000, 92, 30, 76, -1000, 99,
	-1000, 92, 66, 3, -1000, -4, 74, -1000, 61, -1000,
	-1000, 92, 55, 92, -1000, -1000, 51, 43, 92, -1000,
	74, 78, 34, 76, -1000, -1000, -1000, 40, -1000, -1000,
	92, 34, 34, -1000, -1000, -1000, -1000, 34, -1000, -1000,
	-1000,
}

var tnPgo = [...]int8{
	0, 6, 8, 113, 112, 4, 111, 110, 109, 1,
	3, 0, 108, 107, 5, 2, 106,
}

var tnR1 = [...]int8{
	0, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 2, 9, 10, 5, 5, 5, 12, 12, 12,
	6, 6, 6, 4, 4, 11, 3, 3, 3, 7,
	7, 13, 13, 15, 8, 8, 16, 16, 14, 14,
}

var tnR2 = [...]int8{
	0, 0, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 5, 5, 3, 7, 6,
	2, 1, 3, 2, 3, 3, 5, 6, 4, 6,
	5, 3, 1, 2, 3, 4, 3, 1, 0, 2,
}

var tnChk = [...]int16{
	-1000, -1, -2, 8, -3, -4, -5, -6, -7, -8,
	9, 10, 6, 13, 4, 7, -12, 11, 19, 20,
	9, 16, -2, 9, -2, -2, 6, -11, 17, 5,
	20, -2, 21, -16, -2, 19, -10, 15, 16, -11,
	-11, 16, 9, -1, -11, -13, 21, -15, 9, 16,
	21, 22, -2, 19, -9, 9, 5, -2, 15, 18,
	21, 22, -14, 12, -10, -2, 16, -2, -11, -5,
	16, -2, -14, -15, -11, -9, 16, -2, -11, -11,
	-11,
}

var tnDef = [...]int8{
	1, -2, 2, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 0, 0, 0, 0, 21, 0, 0, 0,
	0, 23, 0, 10, 0, 0, 0, 20, 1, 0,
	0, 0, 34, 0, 37, 0, 0, 0, 24, 14,
	17, 0, 0, 0, 22, 0, 38, 32, 0, 28,
	35, 0, 0, 0, 13, 12, 0, 0, 0, 25,
	38, 0, 0, 0, 33, 36, 26, 0, 15, 16,
	0, 0, 0, 31, 30, 39, 27, 0, 19, 29,
	18,
}

var tnTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	20, 21, 3, 3, 22, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 15, 16,
	3, 19, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 17, 3, 18,
}

var tnTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14,
}

var tnTok3 = [...]int8{
	0,
}

var tnErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	tnDebug        = 0
	tnErrorVerbose = false
)

type tnLexer interface {
	Lex(lval *tnSymType) int
	Error(s string)
}

type tnParser interface {
	Parse(tnLexer) int
	Lookahead() int
}

type tnParserImpl struct {
	lval  tnSymType
	stack [tnInitialStackSize]tnSymType
	char  int
}

func (p *tnParserImpl) Lookahead() int {
	return p.char
}

func tnNewParser() tnParser {
	return &tnParserImpl{}
}

const tnFlag = -1000

func tnTokname(c int) string {
	if c >= 1 && c-1 < len(tnToknames) {
		if tnToknames[c-1] != "" {
			return tnToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func tnStatname(s int) string {
	if s >= 0 && s < len(tnStatenames) {
		if tnStatenames[s] != "" {
			return tnStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func tnErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !tnErrorVerbose {
		return "syntax error"
	}

	for _, e := range tnErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + tnTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(tnPact[state])
	for tok := TOKSTART; tok-1 < len(tnToknames); tok++ {
		if n := base + tok; n >= 0 && n < tnLast && int(tnChk[int(tnAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if tnDef[state] == -2 {
		i := 0
		for tnExca[i] != -1 || int(tnExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; tnExca[i] >= 0; i += 2 {
			tok := int(tnExca[i])
			if tok < TOKSTART || tnExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if tnExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += tnTokname(tok)
	}
	return res
}

func tnlex1(lex tnLexer, lval *tnSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(tnTok1[0])
		goto out
	}
	if char < len(tnTok1) {
		token = int(tnTok1[char])
		goto out
	}
	if char >= tnPrivate {
		if char < tnPrivate+len(tnTok2) {
			token = int(tnTok2[char-tnPrivate])
			goto out
		}
	}
	for i := 0; i < len(tnTok3); i += 2 {
		token = int(tnTok3[i+0])
		if token == char {
			token = int(tnTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(tnTok2[1]) /* unknown char */
	}
	if tnDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", tnTokname(token), uint(char))
	}
	return char, token
}

func tnParse(tnlex tnLexer) int {
	return tnNewParser().Parse(tnlex)
}

func (tnrcvr *tnParserImpl) Parse(tnlex tnLexer) int {
	var tnn int
	var tnVAL tnSymType
	var tnDollar []tnSymType
	_ = tnDollar // silence set and not used
	tnS := tnrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	tnstate := 0
	tnrcvr.char = -1
	tntoken := -1 // tnrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		tnstate = -1
		tnrcvr.char = -1
		tntoken = -1
	}()
	tnp := -1
	goto tnstack

ret0:
	return 0

ret1:
	return 1

tnstack:
	/* put a state and value onto the stack */
	if tnDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", tnTokname(tntoken), tnStatname(tnstate))
	}

	tnp++
	if tnp >= len(tnS) {
		nyys := make([]tnSymType, len(tnS)*2)
		copy(nyys, tnS)
		tnS = nyys
	}
	tnS[tnp] = tnVAL
	tnS[tnp].yys = tnstate

tnnewstate:
	tnn = int(tnPact[tnstate])
	if tnn <= tnFlag {
		goto tndefault /* simple state */
	}
	if tnrcvr.char < 0 {
		tnrcvr.char, tntoken = tnlex1(tnlex, &tnrcvr.lval)
	}
	tnn += tntoken
	if tnn < 0 || tnn >= tnLast {
		goto tndefault
	}
	tnn = int(tnAct[tnn])
	if int(tnChk[tnn]) == tntoken { /* valid shift */
		tnrcvr.char = -1
		tntoken = -1
		tnVAL = tnrcvr.lval
		tnstate = tnn
		if Errflag > 0 {
			Errflag--
		}
		goto tnstack
	}

tndefault:
	/* default state action */
	tnn = int(tnDef[tnstate])
	if tnn == -2 {
		if tnrcvr.char < 0 {
			tnrcvr.char, tntoken = tnlex1(tnlex, &tnrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if tnExca[xi+0] == -1 && int(tnExca[xi+1]) == tnstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			tnn = int(tnExca[xi+0])
			if tnn < 0 || tnn == tntoken {
				break
			}
		}
		tnn = int(tnExca[xi+1])
		if tnn < 0 {
			goto ret0
		}
	}
	if tnn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			tnlex.Error(tnErrorMessage(tnstate, tntoken))
			Nerrs++
			if tnDebug >= 1 {
				__yyfmt__.Printf("%s", tnStatname(tnstate))
				__yyfmt__.Printf(" saw %s\n", tnTokname(tntoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for tnp >= 0 {
				tnn = int(tnPact[tnS[tnp].yys]) + tnErrCode
				if tnn >= 0 && tnn < tnLast {
					tnstate = int(tnAct[tnn]) /* simulate a shift of "error" */
					if int(tnChk[tnstate]) == tnErrCode {
						goto tnstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if tnDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", tnS[tnp].yys)
				}
				tnp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if tnDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", tnTokname(tntoken))
			}
			if tntoken == tnEofCode {
				goto ret1
			}
			tnrcvr.char = -1
			tntoken = -1
			goto tnnewstate /* try again in the same state */
		}
	}

	/* reduction by production tnn */
	if tnDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", tnn, tnStatname(tnstate))
	}

	tnnt := tnn
	tnpt := tnp
	_ = tnpt // guard against "declared and not used"

	tnp -= int(tnR2[tnn])
	// tnp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if tnp+1 >= len(tnS) {
		nyys := make([]tnSymType, len(tnS)*2)
		copy(nyys, tnS)
		tnS = nyys
	}
	tnVAL = tnS[tnp+1]

	/* consult goto table to find next state */
	tnn = int(tnR1[tnn])
	tng := int(tnPgo[tnn])
	tnj := tng + tnS[tnp].yys + 1

	if tnj >= tnLast {
		tnstate = int(tnAct[tng])
	} else {
		tnstate = int(tnAct[tnj])
		if int(tnChk[tnstate]) != -tnn {
			tnstate = int(tnAct[tng])
		}
	}
	// dummy call; replaced with literal code
	switch tnnt {

	}
	goto tnstack /* stack new state and value */
}
