// Code generated by goyacc -o tnzepl.go -p tn tnzepl.y. DO NOT EDIT.

//line tnzepl.y:1

package main

import __yyfmt__ "fmt"

//line tnzepl.y:3

import "github.com/timtadh/lexmachine"

// import "log"

var tnRoot expr

const IF = 57346
const ELSE = 57347
const LET = 57348
const FOR = 57349
const IDENTIFIER = 57350
const LITERAL = 57351
const FN = 57352
const RARROW = 57353
const BREAK = 57354
const CONTINUE = 57355
const EQ = 57356
const NE = 57357
const OROR = 57358
const ANDAND = 57359
const OR = 57360
const AND = 57361
const XOR = 57362
const LE = 57363
const LEEQ = 57364
const BG = 57365
const BGEQ = 57366
const LSHIFT = 57367
const RSHIFT = 57368

var tnToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IF",
	"ELSE",
	"LET",
	"FOR",
	"IDENTIFIER",
	"LITERAL",
	"FN",
	"RARROW",
	"BREAK",
	"CONTINUE",
	"EQ",
	"NE",
	"OROR",
	"ANDAND",
	"OR",
	"AND",
	"XOR",
	"LE",
	"LEEQ",
	"BG",
	"BGEQ",
	"LSHIFT",
	"RSHIFT",
	"'('",
	"')'",
	"';'",
	"'='",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"','",
	"':'",
	"'{'",
	"'}'",
}

var tnStatenames = [...]string{}

const tnEofCode = 1
const tnErrCode = 2
const tnInitialStackSize = 16

//line yacctab:1
var tnExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const tnPrivate = 57344

const tnLast = 241

var tnAct = [...]uint8{
	23, 24, 179, 66, 136, 76, 77, 103, 19, 17,
	21, 14, 16, 38, 9, 75, 20, 111, 15, 67,
	72, 44, 29, 73, 105, 18, 37, 3, 74, 71,
	113, 22, 70, 111, 78, 65, 143, 43, 69, 30,
	28, 110, 30, 68, 169, 5, 147, 129, 130, 131,
	38, 30, 84, 62, 83, 30, 167, 142, 90, 91,
	89, 81, 2, 96, 97, 88, 109, 86, 112, 100,
	101, 102, 30, 98, 99, 30, 92, 93, 94, 95,
	85, 133, 38, 138, 82, 58, 59, 60, 108, 127,
	128, 56, 57, 63, 38, 170, 38, 42, 38, 173,
	45, 38, 175, 166, 141, 118, 132, 140, 80, 87,
	139, 37, 78, 106, 125, 126, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 160, 161, 144, 162, 163, 164, 151,
	165, 158, 159, 152, 153, 146, 172, 150, 174, 149,
	154, 155, 156, 157, 148, 145, 36, 61, 10, 33,
	11, 29, 35, 47, 12, 13, 117, 171, 54, 55,
	44, 29, 178, 46, 78, 116, 182, 181, 183, 28,
	184, 40, 36, 185, 115, 33, 44, 29, 35, 28,
	30, 107, 36, 39, 10, 33, 11, 29, 35, 38,
	12, 13, 177, 180, 137, 28, 121, 122, 123, 124,
	50, 51, 52, 53, 114, 28, 30, 119, 120, 48,
	49, 41, 79, 64, 168, 135, 30, 176, 134, 34,
	32, 31, 104, 8, 7, 6, 27, 26, 25, 4,
	1,
}

var tnPact = [...]int16{
	-1000, -1000, 188, 82, -1000, 176, -1000, -1000, -1000, 163,
	213, 67, 178, 71, 153, 144, 205, 189, 143, 60,
	52, -1000, 130, -1000, -1000, -1000, -1000, -1000, 178, -1000,
	-1000, 218, -1000, 13, 217, 81, 178, -1000, 178, 178,
	178, 50, 178, 80, -1000, -1000, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 85, 152, 37, -1000, 1, 206, 167, 157,
	146, 86, 203, 185, 89, 58, 14, -1000, 79, 4,
	196, 34, 176, 163, 153, 178, 78, -1000, 144, 205,
	189, 189, 143, 143, 143, 143, 60, 60, 52, 52,
	-1000, -1000, -1000, 76, 21, 183, -1000, -1000, -3, -1000,
	178, 162, -1000, 178, 9, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 178, -1000, 75, 20, -1000, 7, -1000, 66,
	-1000, -1000, 178, -1000, 34, 167, 70, 162, 157, 146,
	86, 203, 185, 185, 89, 89, 89, 89, 58, 58,
	14, 14, -1000, -1000, -1000, 74, 191, 196, -1000, 195,
	-1000, 183, -1000, 162, 4, -1000, 4, 195, -1000, -1000,
	-1000, 17, -1000, -1000, -1000, -1000,
}

var tnPgo = [...]uint8{
	0, 240, 62, 24, 239, 31, 0, 1, 238, 237,
	236, 235, 234, 233, 45, 3, 43, 14, 38, 11,
	32, 18, 29, 12, 20, 9, 23, 25, 28, 8,
	15, 16, 5, 10, 6, 7, 232, 231, 230, 229,
	228, 227, 225, 4, 224, 2,
}

var tnR1 = [...]int8{
	0, 1, 1, 2, 2, 5, 5, 5, 5, 5,
	6, 6, 6, 4, 4, 4, 4, 11, 11, 12,
	13, 3, 3, 15, 15, 14, 14, 16, 16, 17,
	17, 18, 18, 19, 19, 20, 20, 21, 21, 22,
	22, 23, 23, 23, 24, 24, 24, 25, 25, 25,
	25, 25, 26, 26, 26, 26, 26, 27, 27, 27,
	28, 28, 28, 29, 29, 29, 30, 30, 30, 31,
	31, 31, 31, 32, 32, 32, 32, 33, 33, 34,
	34, 35, 35, 36, 36, 8, 8, 38, 37, 37,
	9, 9, 9, 39, 39, 39, 7, 7, 10, 40,
	40, 42, 42, 43, 41, 41, 45, 44,
}

var tnR2 = [...]int8{
	0, 1, 2, 0, 2, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 2, 5, 4, 3,
	2, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 3, 1, 3, 3, 1, 3, 3, 3,
	3, 1, 3, 3, 3, 3, 1, 3, 3, 1,
	3, 3, 1, 3, 3, 1, 3, 3, 1, 3,
	3, 3, 1, 3, 3, 3, 1, 4, 1, 4,
	1, 0, 1, 3, 1, 1, 1, 3, 3, 5,
	2, 1, 3, 3, 7, 6, 3, 4, 6, 0,
	1, 1, 3, 2, 0, 2, 1, 2,
}

var tnChk = [...]int16{
	-1000, -1, -2, -3, -4, -14, -11, -12, -13, -17,
	6, 8, 12, 13, -19, -21, -23, -25, -27, -29,
	-31, -33, -5, -6, -7, -8, -9, -10, 27, 9,
	38, -37, -38, 7, -39, 10, 4, 29, 16, 17,
	18, 8, 30, -3, 8, 29, 20, 19, 14, 15,
	21, 22, 23, 24, 25, 26, 31, 32, 33, 34,
	35, 27, -3, -2, 5, -7, -15, 6, -16, -18,
	-20, -22, -24, -26, -28, -30, -32, -34, -6, 5,
	27, -3, -14, -17, -19, 30, -3, 29, -21, -23,
	-25, -25, -27, -27, -27, -27, -29, -29, -31, -31,
	-33, -33, -33, -35, -36, -3, 28, 39, -3, -7,
	4, 16, -7, 29, 8, 17, 18, 20, 19, 14,
	15, 21, 22, 23, 24, 25, 26, 31, 32, 33,
	34, 35, 27, -7, -40, -42, -43, 8, -7, -3,
	29, 28, 36, 39, -3, -16, -5, 37, -18, -20,
	-22, -24, -26, -26, -28, -28, -28, -28, -30, -30,
	-32, -32, -34, -34, -34, -35, 28, 36, -44, 37,
	29, -3, -7, 29, -6, 28, -41, 11, -43, -45,
	8, -15, -7, -7, -45, -7,
}

var tnDef = [...]int8{
	3, -2, 1, 2, 4, 22, 13, 14, 15, 26,
	0, 12, 0, 0, 30, 34, 38, 43, 51, 59,
	65, 72, 78, 5, 6, 7, 8, 9, 0, 11,
	3, 85, 86, 0, 91, 0, 0, 16, 0, 0,
	0, 0, 0, 0, 12, 20, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 90, 0, 0, 24, 28,
	32, 36, 40, 46, 56, 62, 68, 76, 80, 0,
	99, 0, 21, 25, 29, 0, 0, 19, 33, 37,
	41, 42, 47, 48, 49, 50, 57, 58, 63, 64,
	69, 70, 71, 0, 82, 84, 10, 96, 0, 87,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 92, 0, 100, 101, 0, 88, 0,
	18, 77, 0, 97, 0, 23, 0, 0, 27, 31,
	35, 39, 44, 45, 52, 53, 54, 55, 60, 61,
	66, 67, 73, 74, 75, 0, 104, 0, 103, 0,
	17, 83, 89, 0, 0, 79, 0, 0, 102, 107,
	106, 0, 95, 98, 105, 94,
}

var tnTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 35, 3, 3,
	27, 28, 33, 31, 36, 32, 3, 34, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 37, 29,
	3, 30, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 38, 3, 39,
}

var tnTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26,
}

var tnTok3 = [...]int8{
	0,
}

var tnErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	tnDebug        = 0
	tnErrorVerbose = false
)

type tnLexer interface {
	Lex(lval *tnSymType) int
	Error(s string)
}

type tnParser interface {
	Parse(tnLexer) int
	Lookahead() int
}

type tnParserImpl struct {
	lval  tnSymType
	stack [tnInitialStackSize]tnSymType
	char  int
}

func (p *tnParserImpl) Lookahead() int {
	return p.char
}

func tnNewParser() tnParser {
	return &tnParserImpl{}
}

const tnFlag = -1000

func tnTokname(c int) string {
	if c >= 1 && c-1 < len(tnToknames) {
		if tnToknames[c-1] != "" {
			return tnToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func tnStatname(s int) string {
	if s >= 0 && s < len(tnStatenames) {
		if tnStatenames[s] != "" {
			return tnStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func tnErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !tnErrorVerbose {
		return "syntax error"
	}

	for _, e := range tnErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + tnTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(tnPact[state])
	for tok := TOKSTART; tok-1 < len(tnToknames); tok++ {
		if n := base + tok; n >= 0 && n < tnLast && int(tnChk[int(tnAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if tnDef[state] == -2 {
		i := 0
		for tnExca[i] != -1 || int(tnExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; tnExca[i] >= 0; i += 2 {
			tok := int(tnExca[i])
			if tok < TOKSTART || tnExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if tnExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += tnTokname(tok)
	}
	return res
}

func tnlex1(lex tnLexer, lval *tnSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(tnTok1[0])
		goto out
	}
	if char < len(tnTok1) {
		token = int(tnTok1[char])
		goto out
	}
	if char >= tnPrivate {
		if char < tnPrivate+len(tnTok2) {
			token = int(tnTok2[char-tnPrivate])
			goto out
		}
	}
	for i := 0; i < len(tnTok3); i += 2 {
		token = int(tnTok3[i+0])
		if token == char {
			token = int(tnTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(tnTok2[1]) /* unknown char */
	}
	if tnDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", tnTokname(token), uint(char))
	}
	return char, token
}

func tnParse(tnlex tnLexer) int {
	return tnNewParser().Parse(tnlex)
}

func (tnrcvr *tnParserImpl) Parse(tnlex tnLexer) int {
	var tnn int
	var tnVAL tnSymType
	var tnDollar []tnSymType
	_ = tnDollar // silence set and not used
	tnS := tnrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	tnstate := 0
	tnrcvr.char = -1
	tntoken := -1 // tnrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		tnstate = -1
		tnrcvr.char = -1
		tntoken = -1
	}()
	tnp := -1
	goto tnstack

ret0:
	return 0

ret1:
	return 1

tnstack:
	/* put a state and value onto the stack */
	if tnDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", tnTokname(tntoken), tnStatname(tnstate))
	}

	tnp++
	if tnp >= len(tnS) {
		nyys := make([]tnSymType, len(tnS)*2)
		copy(nyys, tnS)
		tnS = nyys
	}
	tnS[tnp] = tnVAL
	tnS[tnp].yys = tnstate

tnnewstate:
	tnn = int(tnPact[tnstate])
	if tnn <= tnFlag {
		goto tndefault /* simple state */
	}
	if tnrcvr.char < 0 {
		tnrcvr.char, tntoken = tnlex1(tnlex, &tnrcvr.lval)
	}
	tnn += tntoken
	if tnn < 0 || tnn >= tnLast {
		goto tndefault
	}
	tnn = int(tnAct[tnn])
	if int(tnChk[tnn]) == tntoken { /* valid shift */
		tnrcvr.char = -1
		tntoken = -1
		tnVAL = tnrcvr.lval
		tnstate = tnn
		if Errflag > 0 {
			Errflag--
		}
		goto tnstack
	}

tndefault:
	/* default state action */
	tnn = int(tnDef[tnstate])
	if tnn == -2 {
		if tnrcvr.char < 0 {
			tnrcvr.char, tntoken = tnlex1(tnlex, &tnrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if tnExca[xi+0] == -1 && int(tnExca[xi+1]) == tnstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			tnn = int(tnExca[xi+0])
			if tnn < 0 || tnn == tntoken {
				break
			}
		}
		tnn = int(tnExca[xi+1])
		if tnn < 0 {
			goto ret0
		}
	}
	if tnn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			tnlex.Error(tnErrorMessage(tnstate, tntoken))
			Nerrs++
			if tnDebug >= 1 {
				__yyfmt__.Printf("%s", tnStatname(tnstate))
				__yyfmt__.Printf(" saw %s\n", tnTokname(tntoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for tnp >= 0 {
				tnn = int(tnPact[tnS[tnp].yys]) + tnErrCode
				if tnn >= 0 && tnn < tnLast {
					tnstate = int(tnAct[tnn]) /* simulate a shift of "error" */
					if int(tnChk[tnstate]) == tnErrCode {
						goto tnstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if tnDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", tnS[tnp].yys)
				}
				tnp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if tnDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", tnTokname(tntoken))
			}
			if tntoken == tnEofCode {
				goto ret1
			}
			tnrcvr.char = -1
			tntoken = -1
			goto tnnewstate /* try again in the same state */
		}
	}

	/* reduction by production tnn */
	if tnDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", tnn, tnStatname(tnstate))
	}

	tnnt := tnn
	tnpt := tnp
	_ = tnpt // guard against "declared and not used"

	tnp -= int(tnR2[tnn])
	// tnp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if tnp+1 >= len(tnS) {
		nyys := make([]tnSymType, len(tnS)*2)
		copy(nyys, tnS)
		tnS = nyys
	}
	tnVAL = tnS[tnp+1]

	/* consult goto table to find next state */
	tnn = int(tnR1[tnn])
	tng := int(tnPgo[tnn])
	tnj := tng + tnS[tnp].yys + 1

	if tnj >= tnLast {
		tnstate = int(tnAct[tng])
	} else {
		tnstate = int(tnAct[tnj])
		if int(tnChk[tnstate]) != -tnn {
			tnstate = int(tnAct[tng])
		}
	}
	// dummy call; replaced with literal code
	switch tnnt {

	case 1:
		tnDollar = tnS[tnpt-1 : tnpt+1]
//line tnzepl.y:23
		{
			tnRoot = append(tnDollar[1].Value.(exprProg), exprEmpty{})
		}
	case 2:
		tnDollar = tnS[tnpt-2 : tnpt+1]
//line tnzepl.y:24
		{
			tnRoot = append(tnDollar[1].Value.(exprProg), tnDollar[2].Value.(expr))
		}
	case 3:
		tnDollar = tnS[tnpt-0 : tnpt+1]
//line tnzepl.y:27
		{
			tnVAL.Token = &lexmachine.Token{Value: exprProg{}}
		}
	case 4:
		tnDollar = tnS[tnpt-2 : tnpt+1]
//line tnzepl.y:28
		{
			tnVAL.Value = append(tnDollar[1].Value.(exprProg), tnDollar[2].Value.(expr))
		}
	case 10:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:38
		{
			tnVAL.Value = tnDollar[2].Value
		}
	case 11:
		tnDollar = tnS[tnpt-1 : tnpt+1]
//line tnzepl.y:39
		{
			tnVAL.Value = evalLiteral(tnDollar[1])
		}
	case 12:
		tnDollar = tnS[tnpt-1 : tnpt+1]
//line tnzepl.y:40
		{
			tnVAL.Value = exprLoad{identifier: string(tnDollar[1].Lexeme)}
		}
	case 17:
		tnDollar = tnS[tnpt-5 : tnpt+1]
//line tnzepl.y:49
		{
			tnVAL.Value = statDefine{
				identifier: string(tnDollar[2].Lexeme),
				expression: tnDollar[4].Value.(expr),
			}
		}
	case 18:
		tnDollar = tnS[tnpt-4 : tnpt+1]
//line tnzepl.y:61
		{
			tnVAL.Value = statAssign{
				identifier: string(tnDollar[1].Lexeme),
				expression: tnDollar[3].Value.(expr),
			}
		}
	case 19:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:68
		{
			tnVAL.Value = exprBreak{value: tnDollar[2].Value.(expr)}
		}
	case 20:
		tnDollar = tnS[tnpt-2 : tnpt+1]
//line tnzepl.y:69
		{
			tnVAL.Value = exprContinue{}
		}
	case 41:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:105
		{
			tnVAL.Value = exprEq{tnDollar[1].Value.(expr), tnDollar[3].Value.(expr)}
		}
	case 42:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:106
		{
			tnVAL.Value = exprNe{tnDollar[1].Value.(expr), tnDollar[3].Value.(expr)}
		}
	case 44:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:109
		{
			tnVAL.Value = exprEq{tnDollar[1].Value.(expr), tnDollar[3].Value.(expr)}
		}
	case 45:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:110
		{
			tnVAL.Value = exprNe{tnDollar[1].Value.(expr), tnDollar[3].Value.(expr)}
		}
	case 63:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:136
		{
			tnVAL.Value = exprAdd{tnDollar[1].Value.(expr), tnDollar[3].Value.(expr)}
		}
	case 64:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:137
		{
			tnVAL.Value = exprSub{tnDollar[1].Value.(expr), tnDollar[3].Value.(expr)}
		}
	case 66:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:140
		{
			tnVAL.Value = exprAdd{tnDollar[1].Value.(expr), tnDollar[3].Value.(expr)}
		}
	case 67:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:141
		{
			tnVAL.Value = exprSub{tnDollar[1].Value.(expr), tnDollar[3].Value.(expr)}
		}
	case 69:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:145
		{
			tnVAL.Value = exprMul{tnDollar[1].Value.(expr), tnDollar[3].Value.(expr)}
		}
	case 70:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:146
		{
			tnVAL.Value = exprDiv{tnDollar[1].Value.(expr), tnDollar[3].Value.(expr)}
		}
	case 71:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:147
		{
			tnVAL.Value = exprMod{tnDollar[1].Value.(expr), tnDollar[3].Value.(expr)}
		}
	case 73:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:150
		{
			tnVAL.Value = exprMul{tnDollar[1].Value.(expr), tnDollar[3].Value.(expr)}
		}
	case 74:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:151
		{
			tnVAL.Value = exprDiv{tnDollar[1].Value.(expr), tnDollar[3].Value.(expr)}
		}
	case 75:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:152
		{
			tnVAL.Value = exprMod{tnDollar[1].Value.(expr), tnDollar[3].Value.(expr)}
		}
	case 77:
		tnDollar = tnS[tnpt-4 : tnpt+1]
//line tnzepl.y:156
		{
			tnVAL.Value = exprFuncCall{fn: tnDollar[1].Value.(expr), args: tnDollar[3].Value.([]expr)}
		}
	case 79:
		tnDollar = tnS[tnpt-4 : tnpt+1]
//line tnzepl.y:159
		{
			tnVAL.Value = exprFuncCall{fn: tnDollar[1].Value.(expr), args: tnDollar[3].Value.([]expr)}
		}
	case 81:
		tnDollar = tnS[tnpt-0 : tnpt+1]
//line tnzepl.y:163
		{
			tnVAL.Token = &lexmachine.Token{Value: []expr{}}
		}
	case 83:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:166
		{
			tnVAL.Value = append(tnDollar[1].Value.([]expr), tnDollar[3].Value.(expr))
		}
	case 84:
		tnDollar = tnS[tnpt-1 : tnpt+1]
//line tnzepl.y:167
		{
			tnVAL.Value = []expr{tnDollar[1].Value.(expr)}
		}
	case 87:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:174
		{
			tnVAL.Value = tnDollar[1].Value.(exprIf).addElse(tnDollar[3])
		}
	case 88:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:177
		{
			tnVAL.Value = exprIf{}.addIf(tnDollar[2], tnDollar[3])
		}
	case 89:
		tnDollar = tnS[tnpt-5 : tnpt+1]
//line tnzepl.y:178
		{
			tnVAL.Value = tnDollar[1].Value.(exprIf).addIf(tnDollar[4], tnDollar[5])
		}
	case 90:
		tnDollar = tnS[tnpt-2 : tnpt+1]
//line tnzepl.y:181
		{
			tnVAL.Value = exprLoop{body: tnDollar[2].Value.(expr)}
		}
	case 91:
		tnDollar = tnS[tnpt-1 : tnpt+1]
//line tnzepl.y:182
		{
			tnVAL.Value = tnDollar[1].Value
		}
	case 92:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:183
		{
			tnVAL.Value = tnDollar[1].Value.(exprWhile).addElse(tnDollar[3])
		}
	case 93:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:185
		{
			tnVAL.Value = exprWhile{cond: tnDollar[2].Value.(expr), body: tnDollar[3].Value.(expr)}
		}
	case 96:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:190
		{
			tnVAL.Value = append(tnDollar[2].Value.(exprProg), exprEmpty{})
		}
	case 97:
		tnDollar = tnS[tnpt-4 : tnpt+1]
//line tnzepl.y:191
		{
			tnVAL.Value = append(tnDollar[2].Value.(exprProg), tnDollar[3].Value.(expr))
		}
	case 98:
		tnDollar = tnS[tnpt-6 : tnpt+1]
//line tnzepl.y:194
		{
			tnVAL.Value = exprFuncDefine{
				args:   tnDollar[3].Value.([]funcArgAnno),
				retTyp: tnDollar[5].Value.(string),
				body:   tnDollar[6].Value.(expr),
			}
		}
	case 99:
		tnDollar = tnS[tnpt-0 : tnpt+1]
//line tnzepl.y:203
		{
			tnVAL.Value = []funcArgAnno{}
		}
	case 100:
		tnDollar = tnS[tnpt-1 : tnpt+1]
//line tnzepl.y:204
		{
			tnVAL.Value = tnDollar[1].Value
		}
	case 101:
		tnDollar = tnS[tnpt-1 : tnpt+1]
//line tnzepl.y:206
		{
			tnVAL.Value = []funcArgAnno{tnDollar[1].Value.(funcArgAnno)}
		}
	case 102:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:207
		{
			tnVAL.Value = append(tnDollar[1].Value.([]funcArgAnno), tnDollar[3].Value.(funcArgAnno))
		}
	case 103:
		tnDollar = tnS[tnpt-2 : tnpt+1]
//line tnzepl.y:209
		{
			tnVAL.Value = funcArgAnno{
				arg: string(tnDollar[1].Lexeme),
				typ: tnDollar[2].Value.(string),
			}
		}
	case 104:
		tnDollar = tnS[tnpt-0 : tnpt+1]
//line tnzepl.y:217
		{
			tnVAL.Value = ""
		}
	case 105:
		tnDollar = tnS[tnpt-2 : tnpt+1]
//line tnzepl.y:218
		{
			tnVAL.Value = string(tnDollar[2].Lexeme)
		}
	case 107:
		tnDollar = tnS[tnpt-2 : tnpt+1]
//line tnzepl.y:222
		{
			tnVAL.Value = string(tnDollar[2].Lexeme)
		}
	}
	goto tnstack /* stack new state and value */
}
