// Code generated by goyacc -o tnzepl.go -p tn tnzepl.y. DO NOT EDIT.

//line tnzepl.y:1

package main

import __yyfmt__ "fmt"

//line tnzepl.y:3

import "github.com/timtadh/lexmachine"

// import "log"

var tnRoot expr

const IF = 57346
const ELSE = 57347
const LET = 57348
const FOR = 57349
const COMMENT = 57350
const IDENTIFIER = 57351
const LITERAL = 57352
const FN = 57353
const RARROW = 57354
const BREAK = 57355
const CONTINUE = 57356

var tnToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IF",
	"ELSE",
	"LET",
	"FOR",
	"COMMENT",
	"IDENTIFIER",
	"LITERAL",
	"FN",
	"RARROW",
	"BREAK",
	"CONTINUE",
	"':'",
	"';'",
	"'{'",
	"'}'",
	"'='",
	"'('",
	"')'",
	"','",
}

var tnStatenames = [...]string{}

const tnEofCode = 1
const tnErrCode = 2
const tnInitialStackSize = 16

//line yacctab:1
var tnExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const tnPrivate = 57344

const tnLast = 117

var tnAct = [...]int8{
	30, 60, 2, 41, 52, 22, 67, 33, 16, 3,
	14, 17, 4, 12, 13, 19, 42, 15, 65, 66,
	40, 35, 64, 56, 57, 25, 27, 28, 44, 45,
	59, 36, 39, 49, 48, 16, 53, 31, 17, 80,
	26, 13, 19, 42, 54, 21, 22, 34, 51, 74,
	58, 72, 37, 46, 31, 70, 62, 69, 55, 16,
	31, 43, 17, 63, 26, 13, 19, 71, 78, 73,
	79, 77, 76, 75, 68, 61, 82, 83, 53, 47,
	23, 32, 84, 16, 81, 29, 17, 20, 26, 13,
	19, 38, 16, 50, 18, 17, 31, 26, 13, 19,
	11, 10, 9, 16, 24, 14, 17, 4, 12, 13,
	19, 8, 15, 7, 6, 5, 1,
}

var tnPact = [...]int16{
	-1000, -1000, 99, -1000, -1000, -1000, -1000, 82, -1000, -1000,
	-1000, -1000, 26, -1000, 71, 88, 55, 79, 76, -13,
	43, 55, 31, 1, -1000, 45, -15, 20, 37, 70,
	-1000, -1000, 20, 27, 55, -1000, 42, -1000, 2, -1000,
	55, 11, 66, -1000, -1000, -1000, 55, 48, 4, -1000,
	-3, 62, -1000, 28, 20, -1000, -1000, 55, 35, 55,
	-1000, -1000, 33, 55, -1000, 62, 69, 20, 66, -1000,
	-1000, -1000, -1000, 23, 55, 20, 20, -1000, -1000, -1000,
	-1000, 20, -1000, -1000, -1000,
}

var tnPgo = [...]int8{
	0, 116, 2, 9, 115, 114, 113, 111, 102, 101,
	100, 1, 3, 0, 94, 93, 6, 4, 91,
}

var tnR1 = [...]int8{
	0, 1, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 11, 12, 6, 6, 7, 14,
	14, 14, 8, 8, 8, 5, 5, 13, 4, 4,
	4, 9, 9, 17, 15, 15, 10, 10, 18, 18,
	16, 16,
}

var tnR2 = [...]int8{
	0, 1, 0, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 5, 3, 3,
	7, 6, 2, 1, 3, 2, 3, 3, 5, 6,
	4, 6, 5, 2, 1, 3, 3, 4, 3, 1,
	0, 2,
}

var tnChk = [...]int16{
	-1000, -1, -2, -3, 8, -4, -5, -6, -7, -8,
	-9, -10, 9, 10, 6, 13, 4, 7, -14, 11,
	5, 19, 20, 9, 16, -3, 9, -3, -3, 6,
	-13, 17, 5, 20, 4, -13, -3, 21, -18, -3,
	19, -12, 15, 16, -13, -13, 16, 9, -2, -13,
	-15, 21, -17, 9, -3, 16, 21, 22, -3, 19,
	-11, 9, -3, 15, 18, 21, 22, -16, 12, -12,
	-13, -3, 16, -3, 16, -3, -16, -17, -13, -11,
	16, -3, -13, -13, -13,
}

var tnDef = [...]int8{
	2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 0, 0, 0, 0, 23, 0,
	0, 0, 0, 0, 25, 0, 12, 0, 0, 0,
	22, 2, 0, 0, 0, 18, 0, 36, 0, 39,
	0, 0, 0, 26, 16, 19, 0, 0, 0, 24,
	0, 40, 34, 0, 0, 30, 37, 0, 0, 0,
	15, 14, 0, 0, 27, 40, 0, 0, 0, 33,
	17, 38, 28, 0, 0, 0, 0, 35, 32, 41,
	29, 0, 21, 31, 20,
}

var tnTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	20, 21, 3, 3, 22, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 15, 16,
	3, 19, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 17, 3, 18,
}

var tnTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14,
}

var tnTok3 = [...]int8{
	0,
}

var tnErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	tnDebug        = 0
	tnErrorVerbose = false
)

type tnLexer interface {
	Lex(lval *tnSymType) int
	Error(s string)
}

type tnParser interface {
	Parse(tnLexer) int
	Lookahead() int
}

type tnParserImpl struct {
	lval  tnSymType
	stack [tnInitialStackSize]tnSymType
	char  int
}

func (p *tnParserImpl) Lookahead() int {
	return p.char
}

func tnNewParser() tnParser {
	return &tnParserImpl{}
}

const tnFlag = -1000

func tnTokname(c int) string {
	if c >= 1 && c-1 < len(tnToknames) {
		if tnToknames[c-1] != "" {
			return tnToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func tnStatname(s int) string {
	if s >= 0 && s < len(tnStatenames) {
		if tnStatenames[s] != "" {
			return tnStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func tnErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !tnErrorVerbose {
		return "syntax error"
	}

	for _, e := range tnErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + tnTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(tnPact[state])
	for tok := TOKSTART; tok-1 < len(tnToknames); tok++ {
		if n := base + tok; n >= 0 && n < tnLast && int(tnChk[int(tnAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if tnDef[state] == -2 {
		i := 0
		for tnExca[i] != -1 || int(tnExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; tnExca[i] >= 0; i += 2 {
			tok := int(tnExca[i])
			if tok < TOKSTART || tnExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if tnExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += tnTokname(tok)
	}
	return res
}

func tnlex1(lex tnLexer, lval *tnSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(tnTok1[0])
		goto out
	}
	if char < len(tnTok1) {
		token = int(tnTok1[char])
		goto out
	}
	if char >= tnPrivate {
		if char < tnPrivate+len(tnTok2) {
			token = int(tnTok2[char-tnPrivate])
			goto out
		}
	}
	for i := 0; i < len(tnTok3); i += 2 {
		token = int(tnTok3[i+0])
		if token == char {
			token = int(tnTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(tnTok2[1]) /* unknown char */
	}
	if tnDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", tnTokname(token), uint(char))
	}
	return char, token
}

func tnParse(tnlex tnLexer) int {
	return tnNewParser().Parse(tnlex)
}

func (tnrcvr *tnParserImpl) Parse(tnlex tnLexer) int {
	var tnn int
	var tnVAL tnSymType
	var tnDollar []tnSymType
	_ = tnDollar // silence set and not used
	tnS := tnrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	tnstate := 0
	tnrcvr.char = -1
	tntoken := -1 // tnrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		tnstate = -1
		tnrcvr.char = -1
		tntoken = -1
	}()
	tnp := -1
	goto tnstack

ret0:
	return 0

ret1:
	return 1

tnstack:
	/* put a state and value onto the stack */
	if tnDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", tnTokname(tntoken), tnStatname(tnstate))
	}

	tnp++
	if tnp >= len(tnS) {
		nyys := make([]tnSymType, len(tnS)*2)
		copy(nyys, tnS)
		tnS = nyys
	}
	tnS[tnp] = tnVAL
	tnS[tnp].yys = tnstate

tnnewstate:
	tnn = int(tnPact[tnstate])
	if tnn <= tnFlag {
		goto tndefault /* simple state */
	}
	if tnrcvr.char < 0 {
		tnrcvr.char, tntoken = tnlex1(tnlex, &tnrcvr.lval)
	}
	tnn += tntoken
	if tnn < 0 || tnn >= tnLast {
		goto tndefault
	}
	tnn = int(tnAct[tnn])
	if int(tnChk[tnn]) == tntoken { /* valid shift */
		tnrcvr.char = -1
		tntoken = -1
		tnVAL = tnrcvr.lval
		tnstate = tnn
		if Errflag > 0 {
			Errflag--
		}
		goto tnstack
	}

tndefault:
	/* default state action */
	tnn = int(tnDef[tnstate])
	if tnn == -2 {
		if tnrcvr.char < 0 {
			tnrcvr.char, tntoken = tnlex1(tnlex, &tnrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if tnExca[xi+0] == -1 && int(tnExca[xi+1]) == tnstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			tnn = int(tnExca[xi+0])
			if tnn < 0 || tnn == tntoken {
				break
			}
		}
		tnn = int(tnExca[xi+1])
		if tnn < 0 {
			goto ret0
		}
	}
	if tnn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			tnlex.Error(tnErrorMessage(tnstate, tntoken))
			Nerrs++
			if tnDebug >= 1 {
				__yyfmt__.Printf("%s", tnStatname(tnstate))
				__yyfmt__.Printf(" saw %s\n", tnTokname(tntoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for tnp >= 0 {
				tnn = int(tnPact[tnS[tnp].yys]) + tnErrCode
				if tnn >= 0 && tnn < tnLast {
					tnstate = int(tnAct[tnn]) /* simulate a shift of "error" */
					if int(tnChk[tnstate]) == tnErrCode {
						goto tnstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if tnDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", tnS[tnp].yys)
				}
				tnp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if tnDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", tnTokname(tntoken))
			}
			if tntoken == tnEofCode {
				goto ret1
			}
			tnrcvr.char = -1
			tntoken = -1
			goto tnnewstate /* try again in the same state */
		}
	}

	/* reduction by production tnn */
	if tnDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", tnn, tnStatname(tnstate))
	}

	tnnt := tnn
	tnpt := tnp
	_ = tnpt // guard against "declared and not used"

	tnp -= int(tnR2[tnn])
	// tnp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if tnp+1 >= len(tnS) {
		nyys := make([]tnSymType, len(tnS)*2)
		copy(nyys, tnS)
		tnS = nyys
	}
	tnVAL = tnS[tnp+1]

	/* consult goto table to find next state */
	tnn = int(tnR1[tnn])
	tng := int(tnPgo[tnn])
	tnj := tng + tnS[tnp].yys + 1

	if tnj >= tnLast {
		tnstate = int(tnAct[tng])
	} else {
		tnstate = int(tnAct[tnj])
		if int(tnChk[tnstate]) != -tnn {
			tnstate = int(tnAct[tng])
		}
	}
	// dummy call; replaced with literal code
	switch tnnt {

	case 1:
		tnDollar = tnS[tnpt-1 : tnpt+1]
//line tnzepl.y:19
		{
			tnRoot = tnVAL.Value.(expr)
		}
	case 2:
		tnDollar = tnS[tnpt-0 : tnpt+1]
//line tnzepl.y:21
		{
			tnVAL.Token = &lexmachine.Token{Value: exprProg{}}
		}
	case 3:
		tnDollar = tnS[tnpt-2 : tnpt+1]
//line tnzepl.y:22
		{
			tnVAL.Value = append(tnDollar[1].Value.(exprProg), tnDollar[2].Value.(expr))
		}
	case 4:
		tnDollar = tnS[tnpt-2 : tnpt+1]
//line tnzepl.y:23
		{
			tnVAL.Value = tnDollar[1].Value
		}
	case 5:
		tnDollar = tnS[tnpt-2 : tnpt+1]
//line tnzepl.y:24
		{
			tnVAL.Value = append(tnDollar[1].Value.(exprProg), tnDollar[2].Value.(expr))
		}
	case 6:
		tnDollar = tnS[tnpt-2 : tnpt+1]
//line tnzepl.y:25
		{
			tnVAL.Value = append(tnDollar[1].Value.(exprProg), tnDollar[2].Value.(expr))
		}
	case 12:
		tnDollar = tnS[tnpt-1 : tnpt+1]
//line tnzepl.y:33
		{
			tnVAL.Value = exprLoad{identifier: string(tnDollar[1].Value.(unEvaled))}
		}
	case 13:
		tnDollar = tnS[tnpt-1 : tnpt+1]
//line tnzepl.y:34
		{
			tnVAL.Value = evalLiteral(tnDollar[1])
		}
	case 16:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:41
		{
			checkItem := exprIfCheckItem{cond: tnDollar[2].Value.(expr), action: tnDollar[3].Value.(expr)}
			tnVAL.Value = exprIf{
				ifCheckList: []exprIfCheckItem{checkItem},
				elseBranch:  nil,
			}
		}
	case 17:
		tnDollar = tnS[tnpt-5 : tnpt+1]
//line tnzepl.y:48
		{
			ev := tnDollar[1].Value.(exprIf)
			checkItem := exprIfCheckItem{cond: tnDollar[4].Value.(expr), action: tnDollar[5].Value.(expr)}
			ev.ifCheckList = append(ev.ifCheckList, checkItem)
			tnVAL.Value = ev
		}
	case 18:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:55
		{
			ev := tnDollar[1].Value.(exprIf)
			ev.elseBranch = tnDollar[3].Value.(expr)
			tnVAL.Value = ev
		}
	case 27:
		tnDollar = tnS[tnpt-3 : tnpt+1]
//line tnzepl.y:76
		{
			tnVAL.Value = tnDollar[2].Value
		}
	case 28:
		tnDollar = tnS[tnpt-5 : tnpt+1]
//line tnzepl.y:79
		{
			tnVAL.Value = statDefine{
				identifier: string(tnDollar[2].Value.(unEvaled)),
				expression: tnDollar[4].Value.(expr),
			}
		}
	case 29:
		tnDollar = tnS[tnpt-6 : tnpt+1]
//line tnzepl.y:85
		{
			tnVAL.Value = statDefine{
				identifier: string(tnDollar[2].Value.(unEvaled)),
				expression: tnDollar[4].Value.(expr),
			}
		}
	case 30:
		tnDollar = tnS[tnpt-4 : tnpt+1]
//line tnzepl.y:91
		{
			tnVAL.Value = statAssign{
				identifier: string(tnDollar[1].Value.(unEvaled)),
				expression: tnDollar[3].Value.(expr),
			}
		}
	}
	goto tnstack /* stack new state and value */
}
